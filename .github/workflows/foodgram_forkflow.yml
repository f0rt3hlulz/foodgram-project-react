name: CI/CD Foodgram

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r backend/requirements.txt

      - name: Test with flake8
        run: |
          python -m flake8 --ignore=I001,E123,I005 backend/recipes/views.py

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram:latest

  deploy:
      runs-on: ubuntu-latest
      needs: build_and_push_to_docker_hub
      if: github.ref == 'refs/heads/master'
      steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dump-env and create .env
        env:
          SECRET_DB_ENGINE: ${{ secrets.DB_ENGINE }}
          SECRET_DB_NAME: ${{ secrets.DB_NAME }}
          SECRET_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          SECRET_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          SECRET_DB_HOST: ${{ secrets.DB_HOST }}
          SECRET_DB_PORT: ${{ secrets.DB_PORT }}
          SECRET_SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          python -m pip install --upgrade pip
          pip install dump-env
          dump-env --template=infra/.env.template --prefix='SECRET_' > infra/.env

      - name: Copy default.conf via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_2ND }}
          username: ${{ secrets.USER_2 }}
          # key: ${{ secrets.SSH_KEY }}
          # passphrase: ${{ secrets.PASSPHRASE }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          source: "infra/nginx/default.conf"
          target: "/home/ftl/foodgram-project-react/nginx"
          strip_components: 2
          
      - name: Copy docker-compose.yaml via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST_2ND }}
          username: ${{ secrets.USER_2 }}
          # key: ${{ secrets.SSH_KEY }}
          password: ${{ secrets.SSH_PASSWORD }}
          # passphrase: ${{ secrets.PASSPHRASE }}
          port: ${{ secrets.PORT }}
          source: "infra/docker-compose.yaml, infra/.env"
          target: "/home/ftl/foodgram-project-react"
          strip_components: 1

      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_2ND }}
          username: ${{ secrets.USER_2 }}
          password: ${{ secrets.SSH_PASSWORD }}
          # key: ${{ secrets.SSH_KEY }}
          # passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo nginx -s stop
            cd ~
            cd /home/ftl/foodgram-project-react
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram:latest
            sudo docker-compose stop
            sudo docker-compose rm web
            sudo docker-compose rm nginx
            sudo docker-compose up -d
            sudo docker-compose exec -T web python manage.py makemigrations --noinput
            sudo docker-compose exec -T web python manage.py migrate --noinput
            sudo docker-compose exec -T web python manage.py loaddata -i data/ingredients.json
            sudo docker-compose exec -T web python manage.py collectstatic --no-input
            # sudo docker-compose exec -T web python manage.py createsuperuser --noinput --username=DJANGO_SUPERUSER_USERNAME --email=DJANGO_SUPERUSER_EMAIL
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!
